# Generated by CodiumAI

from modules.data.parser.mods_parser import ModParser

"""
Code Analysis

Main functionalities:
The ModParser class is responsible for parsing and extracting data from a JSON file containing information about mods in a game. It provides methods to retrieve various attributes of mods such as their generation type, domain, type, group, added tags, implicit tags, spawn weights, and stats. The class also filters out mods based on a domain whitelist.

Methods:
- parse_json(): loads the JSON file and returns its contents
- get_all_mod_data_for_key(key): returns a list of dictionaries containing the specified key and its value for all mods in the JSON file
- get_mod_data_by_key(mod_data, key): returns a dictionary containing the specified key and its value for a given mod
- get_all_mod_generation_types(): returns a list of dictionaries containing the "generation_type" key and its value for all mods in the JSON file
- get_mod_generation_type(mod_data): returns the value of the "generation_type" key for a given mod
- get_all_mod_domains(): returns a list of dictionaries containing the "domain" key and its value for all mods in the JSON file
- get_mod_domain(mod_data): returns the value of the "domain" key for a given mod
- get_all_mod_types(): returns a list of all mod types in the JSON file
- get_mod_type(mod_data): returns the value of the "type" key for a given mod
- get_all_mod_groups(): returns a list of all mod groups in the JSON file
- get_mod_group(mod_data): returns the value of the "groups" key for a given mod
- get_all_mods(): returns a list of all mods in the JSON file
- get_added_tags(mod_data): returns a list of all "adds_tags" values for a given mod
- get_implicit_tags(mod_data): returns a list of all "implicit_tags" values for a given mod
- get_spawn_weights(mod_data): returns a list of dictionaries containing the "tag" and "weight" keys and their values for all "spawn_weights" values for a given mod
- get_stats(mod_data): returns a list of dictionaries containing the "id" key and its value, as well as a dictionary containing the "min" and "max" keys and their values for all "stats" values for a given mod

Fields:
- _data: stores the parsed JSON data
- abs_path_to_json: stores the absolute path to the JSON file
- mod_list: stores a list of all mods in the JSON file
"""


class TestModParser:
    #  Tests that the class can be instantiated without errors
    def test_instantiation(self):
        mod_parser = ModParser()
        assert mod_parser is not None
    
    #  Tests that the parse_json method returns the expected data
    def test_parse_json_returns_expected_data(self):
        mod_parser = ModParser()
        expected_data = {
            "mod1": {
                "name": "mod1",
                "domain": "item",
                "generation_type": "prefix",
                "type": "explicit",
                "groups": [
                    "group1"
                ],
                "adds_tags": [
                    "tag1"
                ],
                "implicit_tags": [
                    "tag2"
                ],
                "spawn_weights": [
                    {
                        "tag": "tag3",
                        "weight": 1
                    }
                ],
                "stats": [
                    {
                        "id": "stat1",
                        "min": 1,
                        "max": 2
                    }
                ]
            }
        }
        assert mod_parser.parse_json() == expected_data
    
    #  Tests that the get_all_mod_data_for_key method returns the expected data
    def test_get_all_mod_data_for_key(self):
        mod_parser = ModParser()
        mod_parser._data = {"mod1": {"name": "mod1_name", "domain": "item", "generation_type": "prefix"},
                            "mod2": {"name": "mod2_name", "domain": "flask", "generation_type": "suffix"}}
        data = mod_parser.get_all_mod_data_for_key("generation_type")
        assert data == [{"generation_type": "prefix"}, {"generation_type": "suffix"}]
    
    #  Tests that the get_mod_data_by_key method returns the expected data
    def test_get_mod_data_by_key(self):
        mod_parser = ModParser()
        mod_data = {"name": "mod_name", "domain": "item", "generation_type": "prefix"}
        data = mod_parser.get_mod_data_by_key(mod_data, "generation_type")
        assert data == {"generation_type": "prefix"}
    
    #  Tests that the get_mod_data_by_key method handles missing keys gracefully
    def test_get_mod_data_by_key_missing_key(self):
        mod_parser = ModParser()
        mod_data = {"name": "mod_name", "domain": "item", "generation_type": "prefix"}
        data = mod_parser.get_mod_data_by_key(mod_data, "invalid_key")
        assert data == {"invalid_key": None}

    def test_get_all_mod_generation_types(self):
        mod_parser = ModParser()
        mod_generation_types_list = mod_parser.get_all_mod_generation_types()
        assert len(mod_generation_types_list) > 0
        
    def test_get_mod_generation_type(self):
        mod_parser = ModParser()
        mod_data_list = mod_parser.get_all_mod_data_for_key('generation_type')
        mod_data = mod_data_list[0]
        mod_generation_type = mod_parser.get_mod_generation_type(mod_data)
        assert mod_generation_type is not None
    
    def test_get_all_mod_domains(self):
        mod_parser = ModParser()
        mod_domains_list = mod_parser.get_all_mod_domains()
        assert isinstance(mod_domains_list, list)
        for mod_data in mod_domains_list:
            assert 'domain' in mod_data
        
    def test_get_all_mods(self):
        mod_parser = ModParser()
        mod_list = mod_parser.get_all_mods()
        assert isinstance(mod_list, list)
        for mod in mod_list:
            assert isinstance(mod, str)
        
    def test_get_mod_domain(self):
        mod_parser = ModParser()
        mod_data = {'domain': 'item'}
        assert mod_parser.get_mod_domain(mod_data) == 'item'
        mod_data = {'domain': 'flask'}
        assert mod_parser.get_mod_domain(mod_data) == 'flask'
        mod_data = {'domain': 'crafted'}
        assert mod_parser.get_mod_domain(mod_data) == 'crafted'
        mod_data = {'domain': 'jewel'}
        assert mod_parser.get_mod_domain(mod_data) == 'jewel'
        mod_data = {'domain': 'abyss_jewel'}
        assert mod_parser.get_mod_domain(mod_data) == 'abyss_jewel'
        mod_data = {'domain': 'delve_fossil'}
        assert mod_parser.get_mod_domain(mod_data) == 'delve_fossil'
        mod_data = {'domain': 'synthesis'}
        assert mod_parser.get_mod_domain(mod_data) == 'synthesis'
        mod_data = {'domain': 'affliction_jewel'}
        assert mod_parser.get_mod_domain(mod_data) == 'affliction_jewel'
        mod_data = {'domain': 'heist_gear'}
        assert mod_parser.get_mod_domain(mod_data) == 'heist_gear'
        mod_data = {'domain': 'trinket'}
        assert mod_parser.get_mod_domain(mod_data) == 'trinket'
        mod_data = {'domain': 'unveiled_modifier'}
        assert mod_parser.get_mod_domain(mod_data) == 'unveiled_modifier'
        mod_data = {'domain': 'misc'}
        assert mod_parser.get_mod_domain(mod_data) == 'misc'
        