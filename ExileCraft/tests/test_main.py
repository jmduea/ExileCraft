
# Generated by CodiumAI

import pytest

from main import MainWindow
from modules.gui.uis.windows.main_window.functions_main_window import MainFunctions

"""
Code Analysis

Main functionalities:
The MainWindow class is responsible for setting up the main window of the application, including the left and right columns, title bar, buttons, and other GUI elements. It also handles the resizing of the window and the updating of comboboxes based on user interaction. The class loads settings from a JSON file and provides methods for parsing clipboard text and handling button clicks.

Methods:
- __init__: Initializes the MainWindow class, setting up the UI and loading settings.
- parse_clipboard_text: Parses the text in the clipboard and creates an ItemParser object.
- btn_clicked: Handles button clicks, updating the UI based on the button that was clicked.
- btn_released: Handles button releases.
- resizeEvent: Handles window resizing events.
- mousePressEvent: Handles mouse press events.
- leaveEvent: Handles mouse leave events.

Fields:
- BTN_HOME: Constant for the home button name.
- BTN_PAGE_2: Constant for the page 2 button name.
- BTN_PAGE_3: Constant for the page 3 button name.
- BTN_INFO: Constant for the information button name.
- BTN_CLOSE_LEFT_COLUMN: Constant for the close left column button name.
- BTN_SETTINGS: Constant for the settings button name.
- BTN_TOP_SETTINGS: Constant for the top settings button name.
"""


class TestMainWindow:
    #  Tests that the main window is created successfully
    def test_main_window_created_successfully(self):
        main_window = MainWindow()
        assert main_window

    #  Tests that the buttons are initialized correctly
    def test_buttons_initialized_correctly(self):
        main_window = MainWindow()
        assert main_window.BTN_HOME == 'btn_home'
        assert main_window.BTN_PAGE_2 == 'btn_page_2'
        assert main_window.BTN_PAGE_3 == 'btn_page_3'
        assert main_window.BTN_INFO == 'btn_info'
        assert main_window.BTN_CLOSE_LEFT_COLUMN == 'btn_close_left_column'
        assert main_window.BTN_SETTINGS == 'btn_settings'
        assert main_window.BTN_TOP_SETTINGS == 'btn_top_settings'

    #  Tests that the settings are loaded correctly
    def test_settings_loaded_correctly(self):
        main_window = MainWindow()
        assert main_window.settings

    #  Tests that the left column is hidden by default
    def test_left_column_hidden_by_default(self):
        main_window = MainWindow()
        assert not MainFunctions.left_column_is_visible(main_window)

    #  Tests that the right column is hidden by default
    def test_right_column_hidden_by_default(self):
        main_window = MainWindow()
        assert not MainFunctions.right_column_is_visible(main_window)

    #  Tests that page 1 is loaded by default
    def test_page_1_loaded_by_default(self):
        main_window = MainWindow()
        assert main_window.ui.load_pages.crafting_emu_page.isVisible()

    #  Tests that the item implicits container is hidden by default
    def test_item_implicits_container_hidden_by_default(self):
        main_window = MainWindow()
        assert not main_window.ui.load_pages.item_implicits_container.isVisible()

    #  Tests that a warning is printed when the settings file is not found
    def test_settings_file_not_found(self, mocker):
        mocker.patch('os.path.isfile', return_value=False)
        with pytest.warns(UserWarning):
            MainWindow()

    #  Tests that the left column is not shown when the info button is clicked and the left column is already visible
    def test_left_column_already_visible_when_info_button_clicked(self, mocker):
        main_window = MainWindow()
        mocker.patch('MainFunctions.left_column_is_visible', return_value=True)
        main_window.btn_info.click()
        assert MainFunctions.left_column_is_visible(main_window)

    #  Tests that the left column is not hidden when the close button is clicked and the left column is already hidden
    def test_left_column_already_hidden_when_close_button_clicked(self, mocker):
        main_window = MainWindow()
        mocker.patch('MainFunctions.left_column_is_visible', return_value=False)
        main_window.btn_close_left_column.click()
        assert not MainFunctions.left_column_is_visible(main_window)
