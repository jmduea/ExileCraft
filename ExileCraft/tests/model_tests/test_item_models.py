# Generated by CodiumAI

import pytest

from modules.data.models.global_models import Domain
from modules.data.models.item_models import VisualIdentity, ItemClass, ItemClassSubtype, ItemProperties, Item
from modules.data.models.mod_models import Mod
from modules.data.models.tag_models import Tag

"""
Code Analysis

Main functionalities: The Item class represents an item base in a game. It contains information about the item's
visual identity, name, metadata ID, class, subclass, domain, drop level, rarity, and whether it is corrupted or not.
It also has relationships with other classes such as Domain, ItemClass, ItemClassSubtype, ItemProperties, Mod,
VisualIdentity, and Tag. The class provides methods to get and format the requirements and properties of an item for
display in the GUI.

Methods:
- __repr__: returns a string representation of the item
- formatted_requirements: gets the formatted requirements of the item
- formatted_properties: gets the formatted properties of the item
- get_requirements: gets the requirements of the item
- get_properties: gets the properties of the item
- get_property_value: gets the value of a property from the item properties
- format_requirements_string: formats the requirements of an item for display in the GUI
- format_properties_string: formats the properties of an item for display in the GUI

Fields:
- visual_identity_id: the ID of the visual identity associated with the item
- name: the name of the item
- meta_data_id: the unique metadata ID of the item
- item_class_id: the ID of the item's class
- item_class_subtype_id: the ID of the item's subclass, if applicable
- domain_id: the ID of the domain to which the item belongs
- drop_level: the drop level of the item
- rarity: the rarity of the item
- is_corrupted: indicates if the item is corrupted or not
- domain: the domain to which the item belongs
- item_class: the class of the item
- item_class_subtype: the subclass of the item, if applicable
- item_properties: the properties of the item
- item_implicits: the implicit mods of the item
- visual_identity: the visual identity associated with the item
- tags: the tags associated with the item
"""


class TestItem:
    #  Tests that an item can be created with all required attributes
    def test_create_item_with_all_attributes(self):
        # Arrange
        visual_identity = VisualIdentity()
        domain = Domain()
        item_class = ItemClass()
        item_class_subtype = ItemClassSubtype()
        item_properties = ItemProperties()
        item_implicits = [Mod()]
        tags = [Tag()]
        # Act
        item = Item(visual_identity=visual_identity, name='Test Item', meta_data_id='test_item', item_class=item_class,
                    item_class_subtype=item_class_subtype, domain=domain, drop_level=1, rarity='normal',
                    is_corrupted=False, item_properties=item_properties, item_implicits=item_implicits, tags=tags)
        # Assert
        assert item is not None
    
    #  Tests that formatted requirements can be retrieved for an item with valid properties
    def test_get_formatted_requirements_with_valid_properties(self):
        # Arrange
        item_properties = ItemProperties(level=10, strength=20, dexterity=30, intelligence=40)
        item = Item(item_properties=item_properties)
        expected_output = '<p align="center"><span style=" font-size:11pt; color:#827a6c;">Requires Level: ' \
                          '</span><span style=" font-size:11pt; font-weight:bold; color:#fff;">10</span>, ' \
                          '<span style=" font-size:11pt; font-weight:bold; color:#fff;">20 </span><span style=" ' \
                          'font-size:11pt; color:#827a6c;">STR</span>, <span style=" font-size:11pt; ' \
                          'font-weight:bold; color:#fff;">30 </span><span style=" font-size:11pt; ' \
                          'color:#827a6c;">DEX</span>, <span style=" font-size:11pt; font-weight:bold; ' \
                          'color:#fff;">40 </span><span style=" font-size:11pt; color:#827a6c;">INT</span></p>'
        # Act
        output = item.formatted_requirements
        # Assert
        assert output == expected_output
